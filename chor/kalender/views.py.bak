# -*- coding: utf-8 -*-
# Create your views here.
from django.http import HttpResponse, HttpResponseRedirect
from django.contrib.auth import authenticate, login, logout
from django.shortcuts import render_to_response, get_object_or_404
from django.contrib.auth.models import User
from django.template import RequestContext
from django.contrib.auth.decorators import login_required
import datetime
from kalender.models import Kalender, Termin


mnames = "Januar Februar M&auml;rz April Mai Juni Juli August September Oktober November Dezember"
mnames = mnames.split()

def login_view(request):
    if request.method == "POST":
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(username=username, password=password)
        if user is not None:
            if user.is_active:
                login(request, user)
                #vorl√§ufig:
                return HttpResponse('Eingeloggt <a href="/logout/"> Abmelden </a>')
            else:
                return render_to_response('login.html', { "error_message" :"Der Account wurde deaktiviert!" ,}, context_instance=RequestContext(request))
        else:
            return render_to_response('login.html', { "error_message" :"Benutzername und/oder Password falsch!" ,}, context_instance=RequestContext(request))
        
        
    else:
        return render_to_response('login.html', None, context_instance=RequestContext(request))
        
def logout_view(request):
    logout(request)
    return render_to_response('login.html', { "error_message" :"Erfolgreich ausgeloggt" ,}, context_instance=RequestContext(request))

@login_required
def YearlyView(request, calid, year):
    lst = []
    k = get_object_or_404(Kalender, pk=calid)
    now_year, now_month = datetime.date.today().year, datetime.date.today().month 
    mlst = []
    for n, month in enumerate(mnames):
        entry = current = False
        entries = k.termin_set.filter(date__year=year, date__month=n+1)
    
        if entries:
            entry = True
        if year == now_year and n+1 == now_month:
            current = True
        mlst.append(dict(n=n+1, month=month, entry=entry, current=current))
    
    return render_to_response("kalender/year.html", dict(months=mlst, user=request.user, yearh=year,))